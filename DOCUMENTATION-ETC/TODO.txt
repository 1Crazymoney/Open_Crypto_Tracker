

############################################################################################################################
TO-DO NOTES
############################################################################################################################
Try sticking with small infrastructure changes, and breaking up large changes into small milestones. 
Then plenty of time is spent on UX / testing / logging / debugging.
Always test in a WebKit-based browser [Epiphany|Safari], Firefox, and Chromium
Password notes: https://www.php.net/manual/en/faq.passwords.php
############################################################################################################################
############################################################################################################################


///////////////////////////////////////////////////////
"NEXT ON THE LIST" SUMMARY SECTION
///////////////////////////////////////////////////////

Post on hive, telegram, discord, Twitter, and Facebook whenever there is a new release of the app.

ALWAYS do everything in the optimizations / bugs / tests / ux / qa / other section of this list FIRST, before adding ANY new features (find every flaming turd before we start a dumpster fire).

Youtube channels on the resources page, that MAY BE DYING (keep an eye on them): Crypto Trader, Crypto Bobby, and IMineBlocks.

///////////////////////////////////////////////////////
OPTIMIZATIONS / BUGS / TESTS / UX / QA / OTHER SECTION
///////////////////////////////////////////////////////



Test login / register / reset with light theme.


Test in all major browsers.


Create a recursive function that calls itself and checks if the item(s) in an array are strings or sub-arrays, to only add non-existent variables to the CACHED app config only if they only exist in config.php (for upgrades). For removing depreciated variables, create a static list to be safe.


Auto correct app config vars at the top of the file, IF the file is called before app config management.


Make sure we can load classes before loading secure cached vars like telegram bot chat id, etc.


Documentation for API / Webhook features


Add api key and webhook keys on admin page.


Alerts bell in header.


Retest password strength function after the modification.


Fresh AUTO install on a raspberry pi throws this INTERFACE error, even though we chowned every file as owner 'pi', and chmod 664 on the root .htaccess file:
runtime: ui | system_error: File write failed for file "/var/www/html/.htaccess" (check permissions for the path "/var/www/html", and the file ".htaccess")
Only happens during THE VERY FIRST RUN after install, reloading the web page after causes no error log messages.


Replace landing page screenshot lightbox modal with one that is a reliable mobile full screen mode (current one has poor mobile support).


Check optimization by enabling "telemetry" debug mode, and reviewing debugging logs.


Make sure all kraken currency markets and other markets are added.


Review Help FAQ, and config.php settings documentation.


Cross-browser test RTL (right to left) effects from middle eastern currency symbols being injected into the interface output for those currencies


Test unicode mobile text message with no space in front of hex-encoded data (forgot to try that, coded and ready to go now...see content_data_encoding() and /DOCUMENTATION-ETC/Developing-maintaining/DEBUGGING.txt).


Code review ALL functions / logic (especially loops, for efficiency).


///////////////////////////////////////////////////////
///////////////////////////////////////////////////////


///////////////////////////////////////////////////////
FEATURES / STRUCTURING SECTION
///////////////////////////////////////////////////////


Option to use new zip file encryption password feature to encrypt portfolio spreadsheet exports when downloading exported portfolio data.


Add additional ability to do telegram webhooks, to query asset prices at different exchanges through telegram chat with the chat bot. Example: "/price ETH/USDT @ Binance"


Create github wiki with the current documentation for the portfolio app.


Prune system stats chart data older than 90 days, via the scheduled maintenance logic.


For scalable chart data, maybe run once daily during cron runtimes creating 1 hour (or greater) time interval chart data stores, using timestamp info in the default chart data store. Then use those for the initial chart loads if the chart data is more than 3 months worth (or whatever time period).


Create chart interval function that divides the desired chart timeline period by the number of maximum data points the chart should ever load, to get the data point time interval, then caches the corresponding timestamped data point intervals into an updated chart for that time period every 24 hours. So we'd have like 6 / 12 / 18 month charts (as examples).


In the "loading charts" logic, add a timer that logs the time it takes to load all Shown Charts, and prints results to the console log.


Always prune system stats chart data (during scheduled maintenance) to never save chart data over 90 days old.


Add localcryptos API support?


Interface alert for upgrades.


Make default btc exchange in config.php optional, and auto-configure if invalid or left blank, based off the default primary currency setting (still log errors though). Additionally, consider defaulting to USD if the primary currency setting is invalid / blank as well (as long as we also error log any detected issues there too)??


Wrap all interface English within a "placeholder" lang_translate() function call. Then from a developer perspective you can still fully see the interface logic, and build out translation logic over time later. 


Create help page modal for explanations on all config.php settings. Then we can run this through the upcoming lang_translate() function.


Build tool that finds localbitcoins markets not added yet


Audio / Visual Alerts setting: add new drop-down parameter, with values increase | decrease | both


Add IFTTT support (alexa / google home / whatever supported devices).


Add google home support via direct connect on same network, OR via IFTTT (whichever is most feasible).


Dynamically add an 'app_version' value to $app_config when processing it, so when we are updating the cached config with a newly-changed config.php config, we not only can see if any new config settings exist / have changed, but we can see if the app was upgraded since the previous cached config update.


CSRF nounce protection for admin AND user interface updates/viewing (session based).


Add an alert bell icon in upcoming header login nav, and have alerts make it red and be a drop-down info bubble clicking it, rather than alerts printed in the footer.


On admin config page, have "reset to default settings" button (with js confirm alert when pushed) that refreshes the cached app_config from config.php settings.


For each key => value loop json admin config to automate generating new admin settings page...selects for arrays, text fields for strings. Maybe certain key names get checkbox / radio button fields.


Once an admin config interface web page is built, only update the cached app_config when new configuration variables are added to config.php, and skip overwriting any pre-existing variables (so we don't revert end-user configuration changes).


Add twilio.com and clicksend.com mobile text messaging support


Add drop-down menu feature next to "update assets" buttons for "save as": cookie data | session data | only post data.


"Delete session data" button, that runs the "hardy session clearing" logic.


2-way encryption option (unlocked with 6 digit PIN) for storing coin amounts (IN COOKIES ONLY, NO DATABASE STORAGE !EVER!), with "quick lock" to quickly re-hide portfolio data (staying hidden persists on page load / reload as well with a cookie).


See if exchange API data arrays can be manipulated slightly to build a reusable module for every exchange's API calls.


Turn string / array manipulations function file into a class.


Add admin settings feature to restore chart data from the zip archive backups (with admin authentication ONLY). Chart restore by prepending, so any existing data remains, BUT only if timestamp is newer than newest backups timestamp. Trigger restore from newest backups folder backup by placing a blank file named RESTORE_CHARTS in the queue directory.


Add setting to enable access stats modal, maybe include an optional password setting to require login to view it in the UI if password is set. Store access data in flat file / json format (so mulitiple values can be read back into the app before updating, then updated values saved back in json overwriting previously saved values). Last 50 unique ip addresses, showing ip address's last user agent / last visit time / total visits count. Drop any over 50 ip addresses off the list based on oldest timestamps. Store visitor ip address data (user agent, etc) in an array key based off ip address (json format). Add visitor stats for API and webhook visits (whenever the stats logic is built out for the interface).


Look into an auto-update feature like WordPress has (downloads a zip file upgrade, and exctracts it overwriting the old app files).


Add Google and Microsoft translate API as options to translate the portfolio interface and price alerts.


Check out cryptocompare.com API.


Build Decred staking calculator.


Create a "Desktop Edition" using PHPDesktop (https://github.com/cztomczak/phpdesktop/wiki), call the hosted version "Server Edition".


Use SQLite for any data storage that needs query capability (can also be used in PHPDesktop version, as it supports SQLite). 


Stats in UI using chart data (if available), to show and compare spot / volume percent changes over an end-user-defined time period for a number of assets (example: BTC / LTC / ETH / XMR spot price percentage changes / 24hr volume percentage changes from April 6th 2019 to November 22nd 2019). Shows trends on which assets are performing better for a certain time period.


Add chart sorting by crypto and usd price / volume percentage change over 1 hour / 1 day / 1 week / 1 month / 90 days / 6 months / 1 year.


Look into X day moving average overlay for charts.


Add market stats summaries from chart data, like pie charts for exchange volume on certain pairs, etc.


Simple trading bot, to run from cron / cli (with SQL-based admin authentication / web UI for configuration)


///////////////////////////////////////////////////////
///////////////////////////////////////////////////////


///////////////////////////////////////////////////////
MAYBE SECTION
///////////////////////////////////////////////////////


SQL-based accounts for storing configuration settings per-user (including setting up new assets available at supported exchanges), BUT !NEVER! STORES PORTFOLIO DATA (FOR PRIVACY / SECURITY-SAKE).


When sql host config has been set in config.php, BUT DATABASE SETUP HAS NOT RUN YET, have the UI require entering the sql user password to initiate database setup (for security)


Maintain sql-based config as completely separate module(s) from the file-based config (config.php), except for the sql host connection / authentication details (put those at the top of the config.php configurations).


Maybe hashed password can be re-hashed with a unique per-browser install semi-constant or constant (like machine name or user agent), to securely store a persistent / semi-persisent login cookie (that hackers cannot steal and run on another machine to auto login easily)?


Admin import / export of settings (consider security implications)?


Convert all long hand javascript to jquery?


Save trading notes via the new ajax-js.php logic (rather than reload the entire app)?


Should GRIN mining difficulty be different for each cuckoo level in the mining calculator?


Add memory limit to all runtimes?


Maybe do a gains pie chart and a separate losses pie chart for the gains / losses summary?


Comparison chart(s) showing historical asset price vs what you paid per-token?


Add auto-install script option to install NGINX (https://www.raspberrypi.org/documentation/remote-access/web-server/nginx.md)?


Maybe add feature to detect new / removed markets?


Consider error log alerts if system load is over 2, or free memory goes under 25 megabytes?


Alerts if NOT admin ip address visiting (admin ip stored in config setting)?


See if at all feasible to fully modularize mining calculators to be added via config settings?







